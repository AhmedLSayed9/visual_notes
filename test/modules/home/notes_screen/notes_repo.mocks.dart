// Mocks generated by Mockito 5.0.17 from annotations
// in visual_notes/test/modules/home/notes_screen/delete_notes_repo.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;
import 'package:visual_notes/modules/home/models/visual_note_model.dart' as _i5;
import 'package:visual_notes/modules/home/repos/notes_repo.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDatabase_0 extends _i1.Fake implements _i2.Database {}

/// A class which mocks [NotesRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesRepo extends _i1.Mock implements _i3.NotesRepo {
  MockNotesRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i2.Database>.value(_FakeDatabase_0()))
          as _i4.Future<_i2.Database>);
  @override
  _i4.Future<_i2.Database> initDb() =>
      (super.noSuchMethod(Invocation.method(#initDb, []),
              returnValue: Future<_i2.Database>.value(_FakeDatabase_0()))
          as _i4.Future<_i2.Database>);
  @override
  _i4.Future<List<_i5.VisualNoteModel>> getAllNotes() => (super.noSuchMethod(
          Invocation.method(#getAllNotes, []),
          returnValue:
              Future<List<_i5.VisualNoteModel>>.value(<_i5.VisualNoteModel>[]))
      as _i4.Future<List<_i5.VisualNoteModel>>);
  @override
  _i4.Future<dynamic> addNote({_i5.VisualNoteModel? visualNoteModel}) =>
      (super.noSuchMethod(
          Invocation.method(#addNote, [], {#visualNoteModel: visualNoteModel}),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> deleteNote({String? noteId}) =>
      (super.noSuchMethod(Invocation.method(#deleteNote, [], {#noteId: noteId}),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> updateNote(
          {_i5.VisualNoteModel? visualNoteModel, String? oldNoteId}) =>
      (super.noSuchMethod(
          Invocation.method(#updateNote, [],
              {#visualNoteModel: visualNoteModel, #oldNoteId: oldNoteId}),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> deleteMultipleNotes({List<String>? notesIds}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMultipleNotes, [], {#notesIds: notesIds}),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> deleteAllNotes() =>
      (super.noSuchMethod(Invocation.method(#deleteAllNotes, []),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
}
